{"version":3,"sources":["../../../app/v1/controllers/driverController.js"],"names":["DriverController","req","res","Driver","getAll","rows","length","status","json","message","getAvailableDrivers","query","myLocation","range","ridersLocation","split","DriversWithInRange","forEach","location","ubicacion","distance","console","log","push","DriverRange","options","id","params","findByOne","send"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;IAEqBA,gB;;;;;;;;0HAEQC,G,EAAKC,G;;;;;;;;uBACPC,mBAAOC,MAAP,E;;;;AAAfC,gBAAAA,I,wBAAAA,I;iDACDA,IAAI,CAACC,MAAL,GAAc,CAAd,GACHJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,EAAE;AADU,iBAArB,CADG,GAIHP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAArB,C;;;;;;;;;;;;;;;;;;;iIAG2BJ,G,EAAKC,G;;;;;;;;uBACbC,mBAAOO,mBAAP,E;;;;AAAfL,gBAAAA,I,yBAAAA,I;kDACDA,IAAI,CAACC,MAAL,GAAc,CAAd,GACHJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,kBAAAA,OAAO,EAAE;AAAX,iBAArB,CADG,GAEHP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAArB,C;;;;;;;;;;;;;;;;;;;4IAGsCJ,G,EAAKC,G;;;;;;;;uBACxBC,mBAAOO,mBAAP,E;;;;AAAfL,gBAAAA,I,0BAAAA,I;6BACsBJ,GAAG,CAACU,K,EAA1BC,U,cAAAA,U,EAAYC,K,cAAAA,K;AACdC,gBAAAA,c,GAAiBF,UAAU,CAACG,KAAX,CAAiB,GAAjB,C;AACnBC,gBAAAA,kB,GAAqB,E;AACzBX,gBAAAA,IAAI,CAACY,OAAL,CAAa,UAACd,MAAD,EAAY;AACvB,sBAAMe,QAAQ,GAAGf,MAAM,CAACgB,SAAP,CAAiBJ,KAAjB,CAAuB,GAAvB,CAAjB;AACA,sBAAMK,QAAQ,GAAG,gCACfF,QAAQ,CAAC,CAAD,CADO,EAEfA,QAAQ,CAAC,CAAD,CAFO,EAGfJ,cAAc,CAAC,CAAD,CAHC,EAIfA,cAAc,CAAC,CAAD,CAJC,CAAjB;AAMAO,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAcF,QAAd,GAAyB,UAAzB,GAAsCP,KAAlD;;AACA,sBAAIO,QAAQ,KAAKP,KAAK,IAAI,CAAd,CAAZ,EAA8B;AAC5BG,oBAAAA,kBAAkB,CAACO,IAAnB,CAAwB;AAAEpB,sBAAAA,MAAM,EAANA,MAAF;AAAUqB,sBAAAA,WAAW,YAAKJ,QAAL;AAArB,qBAAxB;AACD;AACF,iBAZD;kDAaOJ,kBAAkB,CAACV,MAAnB,GAA4B,CAA5B,GACHJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,EAAE,oCADU;AAEnBgB,kBAAAA,OAAO,EAAE;AAFU,iBAArB,CADG,GAKHvB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,kBAArB,C;;;;;;;;;;;;;;;;;;;4HAGsBf,G,EAAKC,G;;;;;;;AACvBwB,gBAAAA,E,GAAOzB,GAAG,CAAC0B,M,CAAXD,E;;uBACevB,mBAAOyB,SAAP,CAAiBF,EAAjB,C;;;;AAAfrB,gBAAAA,I,yBAAAA,I;;oBACHA,IAAI,CAAC,CAAD,C;;;;;kDACAH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBsB,IAAhB,CAAqB;AAAEpB,kBAAAA,OAAO,EAAE;AAAX,iBAArB,C;;;kDAEFP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAAI,CAAC,CAAD,CAAzB,C","sourcesContent":["import Driver from \"../database/Driver\";\nimport { calculateDistance } from \"../helpers/helpers\";\n\nexport default class DriverController {\n  \n  static async getAllDrivers(req, res) {\n    const { rows } = await Driver.getAll();\n    return rows.length < 1\n      ? res.status(404).json({\n          message: \"No se encontraron conductores\",\n        })\n      : res.status(200).json(rows);\n  }\n\n  static async getAvailableDrivers(req, res) {\n    const { rows } = await Driver.getAvailableDrivers();\n    return rows.length < 1\n      ? res.status(404).json({ message: \"No existen conductores disponibles por el momento\" })\n      : res.status(200).json(rows);\n  }\n\n  static async getAvailableDriversWithInRange(req, res) {\n    const { rows } = await Driver.getAvailableDrivers();\n    const { myLocation, range } = req.query;    \n    const ridersLocation = myLocation.split(\",\");\n    let DriversWithInRange = [];\n    rows.forEach((Driver) => {\n      const location = Driver.ubicacion.split(\",\");\n      const distance = calculateDistance(\n        location[0],\n        location[1],\n        ridersLocation[0],\n        ridersLocation[1]\n      );\n      console.log(\"distance \" + distance + \" range: \" + range);\n      if (distance <= (range || 3)) {\n        DriversWithInRange.push({ Driver, DriverRange: `${distance} KM` });\n      }\n    });\n    return DriversWithInRange.length < 1\n      ? res.status(200).json({\n          message: \"No hay conductores cercanos a 3 KM\",\n          options: \"<distancia> par√°metro de consulta para aumentar la distancia\",\n        })\n      : res.status(200).json(DriversWithInRange);\n  }\n  \n  static async findDriverById(req, res) {\n    const { id } = req.params;\n    const { rows } = await Driver.findByOne(id);\n    if (!rows[0]) {\n      return res.status(404).send({ message: \"Driver no existe en la base de datos\" });\n    }\n    return res.status(200).json(rows[0]);\n  }\n}\n"],"file":"driverController.js"}