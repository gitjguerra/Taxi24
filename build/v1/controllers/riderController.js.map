{"version":3,"sources":["../../../app/v1/controllers/riderController.js"],"names":["RiderControllers","req","res","Rider","getAll","rows","length","status","json","message","id","params","findByOne","send","Driver","getAvailableDrivers","query","myLocation","threshold","driversDistance","map","driver","lon1","lon","lat1","lat","location","lon2","lat2","distance","push","closest","slice","options"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEqBA,gB;;;;;;;;yHAEOC,G,EAAKC,G;;;;;;;;uBACNC,kBAAMC,MAAN,E;;;;AAAfC,gBAAAA,I,uBAAAA,I;iDACDA,IAAI,CAACC,MAAL,GAAc,CAAd,GACHJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,EAAE;AADU,iBAArB,CADG,GAIHP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAArB,C;;;;;;;;;;;;;;;;;;;0HAGoBJ,G,EAAKC,G;;;;;;;AACrBQ,gBAAAA,E,GAAOT,GAAG,CAACU,M,CAAXD,E;;uBACeP,kBAAMS,SAAN,CAAgBF,EAAhB,C;;;;AAAfL,gBAAAA,I,yBAAAA,I;;oBACHA,IAAI,CAAC,CAAD,C;;;;;kDACAH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAAEJ,kBAAAA,OAAO,EAAE;AAAX,iBAArB,C;;;kDAEFP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAAI,CAAC,CAAD,CAAzB,C;;;;;;;;;;;;;;;;;;;+HAGsBJ,G,EAAKC,G;;;;;;;;uBACXY,mBAAOC,mBAAP,E;;;;AAAfV,gBAAAA,I,yBAAAA,I;6BAC0BJ,GAAG,CAACe,K,EAA9BC,U,cAAAA,U,EAAYC,S,cAAAA,S;AACdC,gBAAAA,e,GAAkB,E;AACxBd,gBAAAA,IAAI,CAACe,GAAL,CAAS,UAACC,MAAD,EAAY;AAAA,wCACc,6BAAeJ,UAAf,CADd;AAAA,sBACNK,IADM,mBACXC,GADW;AAAA,sBACKC,IADL,mBACAC,GADA;;AAAA,yCAEc,6BAAeJ,MAAM,CAACK,QAAtB,CAFd;AAAA,sBAENC,IAFM,oBAEXJ,GAFW;AAAA,sBAEKK,IAFL,oBAEAH,GAFA;;AAGnB,sBAAMI,QAAQ,GAAG,gCAAkBL,IAAlB,EAAwBF,IAAxB,EAA8BM,IAA9B,EAAoCD,IAApC,CAAjB;AACAN,kBAAAA,MAAM,CAAC,UAAD,CAAN,GAAqBQ,QAArB;AACAV,kBAAAA,eAAe,CAACW,IAAhB,CAAqBT,MAArB;AACD,iBAND;AAOMU,gBAAAA,O,GAAU,0BAAYZ,eAAZ,EAA6Ba,KAA7B,CAAmC,CAAnC,EAAsCd,SAAS,IAAI,CAAnD,C;kDACTa,OAAO,CAACzB,MAAR,GAAiB,CAAjB,GACHJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,EAAE,kCADU;AAEnBwB,kBAAAA,OAAO,EAAE;AAFU,iBAArB,CADG,GAKH/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBuB,OAArB,C","sourcesContent":["import Driver from \"../database/Driver\";\nimport Rider from \"../database/Rider\";\nimport { getCoordinates, calculateDistance, arraySorter } from \"../helpers/helpers\";\n\nexport default class RiderControllers {\n\n  static async getAllRiders(req, res) {\n    const { rows } = await Rider.getAll();\n    return rows.length < 1\n      ? res.status(404).json({\n          message: \"No existen pasajeros en la base de datos !!!\",\n        })\n      : res.status(200).json(rows);\n  }\n\n  static async getRiderById(req, res) {\n    const { id } = req.params;\n    const { rows } = await Rider.findByOne(id);\n    if (!rows[0]) {\n      return res.status(404).send({ message: \"Pasajero no existe !!!\" });\n    }\n    return res.status(200).json(rows[0]);\n  }\n\n  static async getClosestDrivers(req, res) {\n    const { rows } = await Driver.getAvailableDrivers();\n    const { myLocation, threshold } = req.query;\n    const driversDistance = [];\n    rows.map((driver) => {\n      const { lon: lon1, lat: lat1 } = getCoordinates(myLocation);\n      const { lon: lon2, lat: lat2 } = getCoordinates(driver.location);\n      const distance = calculateDistance(lat1, lon1, lat2, lon2);\n      driver[\"distance\"] = distance;\n      driversDistance.push(driver);\n    });\n    const closest = arraySorter(driversDistance).slice(0, threshold || 3);\n    return closest.length < 1\n      ? res.status(404).json({\n          message: \"No existen conductores cerca !!!\",\n          options: \"Agregar parametro para aumentar la distancia a consultar\",\n        })\n      : res.status(200).json(closest);\n  }\n}\n"],"file":"riderController.js"}