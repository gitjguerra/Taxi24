{"version":3,"sources":["../../../app/v1/database/index.js"],"names":["require","Pool","dotenv","config","pool","user","host","database","password","port","on","console","log","createTables","queryText","query","then","res","end","err","seedDatabase","dropTables","text","params","Promise","resolve","reject","module","exports"],"mappings":";;eAAiBA,OAAO,CAAC,IAAD,C;IAAhBC,I,YAAAA,I;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEAE,MAAM,CAACC,MAAP;AACA,IAAMC,IAAI,GAAG,IAAIH,IAAJ,CAAS;AAClBI,EAAAA,IAAI,EAAE,UADY;AAElBC,EAAAA,IAAI,EAAE,WAFY;AAGlBC,EAAAA,QAAQ,EAAE,YAHQ;AAIlBC,EAAAA,QAAQ,EAAE,OAJQ;AAKlBC,EAAAA,IAAI,EAAE;AALY,CAAT,CAAb;AAQAL,IAAI,CAACM,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD,CAFD;;AAIA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMC,SAAS,0hCAAf;AAuCAV,EAAAA,IAAI,CACDW,KADH,CACSD,SADT,EAEGE,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAR,IAAAA,IAAI,CAACc,GAAL;AACD,GALH,WAMS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAf,IAAAA,IAAI,CAACc,GAAL;AACD,GATH;AAUD,CAlDD;;AAoDA,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMN,SAAS,gkDAAf;AAkCAV,EAAAA,IAAI,CACDW,KADH,CACSD,SADT,EAEGE,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAR,IAAAA,IAAI,CAACc,GAAL;AACD,GALH,WAMS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAf,IAAAA,IAAI,CAACc,GAAL;AACD,GATH;AAUD,CA7CD;;AA+CA,IAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMP,SAAS,wKAAf;AAOAV,EAAAA,IAAI,CACDW,KADH,CACSD,SADT,EAEGE,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbN,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAR,IAAAA,IAAI,CAACc,GAAL;AACD,GALH,WAMS,UAACC,GAAD,EAAS;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAf,IAAAA,IAAI,CAACc,GAAL;AACD,GATH;AAUD,CAlBD;;AAoBA,IAAMH,KAAK,GAAG,SAARA,KAAQ,CAACO,IAAD,EAAOC,MAAP,EAAkB;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCtB,IAAAA,IAAI,CACDW,KADH,CACSO,IADT,EACeC,MADf,EAEGP,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbQ,MAAAA,OAAO,CAACR,GAAD,CAAP;AACD,KAJH,WAKS,UAACE,GAAD,EAAS;AACdO,MAAAA,MAAM,CAACP,GAAD,CAAN;AACD,KAPH;AAQD,GATM,CAAP;AAUD,CAXD;;AAaAQ,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,YAAY,EAAZA,YADe;AAEfQ,EAAAA,UAAU,EAAVA,UAFe;AAGfD,EAAAA,YAAY,EAAZA,YAHe;AAIfL,EAAAA,KAAK,EAALA;AAJe,CAAjB;;AAOAf,OAAO,CAAC,eAAD,CAAP","sourcesContent":["const { Pool } = require(\"pg\");\nconst dotenv = require(\"dotenv\");\n\ndotenv.config();\nconst pool = new Pool({\n    user: 'postgres',\n    host: 'localhost',\n    database: 'taxi24_qik',\n    password: 'admin',\n    port: 5432,\n});\n\npool.on(\"connect\", () => {\n  console.log(\"conectado a la base de datos !!!\");\n});\n\nconst createTables = () => {\n  const queryText = \n  `CREATE TABLE IF NOT EXISTS\n   conductores(\n     id SERIAL PRIMARY KEY,\n     nombre VARCHAR(30) NOT NULL,\n     telefono VARCHAR(30) NOT NULL,\n     email VARCHAR(30) NOT NULL UNIQUE,\n     ubicacion VARCHAR(100),\n     disponible BOOLEAN\n   ); \n  \n  CREATE TABLE IF NOT EXISTS  \n  pasajeros(\n    id SERIAL PRIMARY KEY,\n    nombre VARCHAR(30) NOT NULL,\n    telefono VARCHAR(30) NOT NULL,\n    email VARCHAR(30) NOT NULL UNIQUE\n  ); \n  \n  CREATE TABLE IF NOT EXISTS\n  viajes(\n    id SERIAL PRIMARY KEY,\n    punto_inicio VARCHAR(30),\n    punto_destino VARCHAR(30),\n    estatus BOOLEAN,\n    pasajero_id integer REFERENCES pasajeros (id),\n    conductor_id integer REFERENCES conductores (id)\n  ); \n  \n  CREATE TABLE IF NOT EXISTS  \n  facturas(\n    id SERIAL PRIMARY KEY,\n    viaje_id integer REFERENCES viajes (id) ON DELETE CASCADE,\n    pasajero_id integer REFERENCES pasajeros (id) ON DELETE CASCADE,\n    conductor_id integer REFERENCES conductores (id) ON DELETE CASCADE,\n    monto numeric,\n    impuesto numeric\n  );`;\n\n  pool\n    .query(queryText)\n    .then((res) => {\n      console.log(\"Tablas creadas con exito !!!\");\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\nconst seedDatabase = () => {\n  const queryText = \n    `INSERT INTO conductores (nombre, telefono, email, ubicacion, disponible) \n    VALUES\n    ('John Doe', '0784758395', 'john.doe@email.com', '-1.956537,30.063616', true),\n    ('Allan Smith', '0784758305', 'allan.smith@email.com', '-1.971142,30.103683', false),\n    ('John Gakuba', '0784758315', 'john.gakuba@email.com', '-1.949549,30.126161', false),\n    ('Henry Mugenzi', '0784752395', 'henry.mugenzi@email.com', '-1.978963,30.223335', true),\n    ('Manzi Eric', '0784758395', 'manzi.eric@email.com', '-1.977940,30.043773', true);\n    \n    INSERT INTO pasajeros (nombre, telefono, email)\n    VALUES\n    ('Laura inema', '0786893958', 'laura.inema@email.com'),\n    ('Chris Rock', '0787940695', 'chris.rock@email.com'),\n    ('Bushido Bushali', '0780033958', 'bushido.bushali@email.com'),\n    ('Maleek Berry', '0734895855', 'maleek.berry@email.com'),\n    ('Mike Kayehuri', '0769785498', 'mike.kayehura@email.com');\n    \n    INSERT INTO viajes (punto_inicio, punto_destino ,estatus, pasajero_id, conductor_id)\n    VALUES\n    ('-1.977940,30.043773', '-1.956537,30.063616', false, 1, 3),\n    ('-1.978963,30.223335', '-1.956537,30.063616', true, 2, 1),\n    ('-1.949549,30.126161', '-1.956537,30.063616', true, 3, 1),\n    ('-1.971142,30.103683', '-1.956537,30.063616', false, 2, 2),\n    ('-1.971142,30.103683', '-1.956537,30.063616', false, 3, 3);\n    \n    INSERT INTO facturas (pasajero_id, conductor_id, viaje_id, monto, impuesto)\n    VALUES\n    (1, 1, 2, 5000, 0.5),\n    (1, 2, 4, 6938, 0.7),\n    (3, 1, 3, 4903, 0.5),\n    (4, 1, 1, 9000, 0.9),\n    (2, 1, 2, 9038, 0.9);\n  `;\n\n  pool\n    .query(queryText)\n    .then((res) => {\n      console.log(\"Query ejecutado con exito !!!\");\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\nconst dropTables = () => {\n  const queryText = `\n      DROP TABLE IF EXISTS facturas;\n      DROP TABLE IF EXISTS viajes;\n      DROP TABLE IF EXISTS conductores;\n      DROP TABLE IF EXISTS pasajeros; \n      `;\n\n  pool\n    .query(queryText)\n    .then((res) => {\n      console.log(\"Tablas eliminadas con exito !!!\");\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\nconst query = (text, params) => {\n  return new Promise((resolve, reject) => {\n    pool\n      .query(text, params)\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nmodule.exports = {\n  createTables,\n  dropTables,\n  seedDatabase,\n  query,\n};\n\nrequire(\"make-runnable\");\n"],"file":"index.js"}