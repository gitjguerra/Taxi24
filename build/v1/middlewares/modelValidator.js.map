{"version":3,"sources":["../../../app/v1/middlewares/modelValidator.js"],"names":["ModelValidator","req","res","next","driverId","body","Driver","findByOne","driver","rows","status","json","message","riderId","Rider","rider","tripId","Trip","params","id","trip"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEqBA,c;;;;;;;;2HACSC,G,EAAKC,G,EAAKC,I;;;;;;AAC5BC,gBAAAA,Q,GAAaH,GAAG,CAACI,I,CAAjBD,Q;;uBACaE,mBAAOC,SAAP,CAAiBH,QAAjB,C;;;AAAfI,gBAAAA,M;AACNP,gBAAAA,GAAG,CAACO,MAAJ,GAAaA,MAAb;iDACOA,MAAM,CAACC,IAAP,CAAY,CAAZ,IACHN,IAAI,EADD,GAEHD,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,gCAAyBR,QAAzB;AADY,iBAArB,C;;;;;;;;;;;;;;;;;;;2HAKqBH,G,EAAKC,G,EAAKC,I;;;;;;AAC3BU,gBAAAA,O,GAAYZ,GAAG,CAACI,I,CAAhBQ,O;;uBACYC,kBAAMP,SAAN,CAAgBM,OAAhB,C;;;AAAdE,gBAAAA,K;AACNd,gBAAAA,GAAG,CAACc,KAAJ,GAAYA,KAAZ;kDACOA,KAAK,CAACN,IAAN,CAAW,CAAX,IACHN,IAAI,EADD,GAEHD,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,+BAAwBC,OAAxB;AADY,iBAArB,C;;;;;;;;;;;;;;;;;;;0HAKoBZ,G,EAAKC,G,EAAKC,I;;;;;;AAC1Ba,gBAAAA,M,GAAWf,GAAG,CAACI,I,CAAfW,M;;uBACWC,iBAAKV,SAAL,CAAeS,MAAM,IAAIf,GAAG,CAACiB,MAAJ,CAAWC,EAApC,C;;;AAAbC,gBAAAA,I;AACNnB,gBAAAA,GAAG,CAACmB,IAAJ,GAAWA,IAAX;kDACOA,IAAI,CAACX,IAAL,CAAU,CAAV,IACHN,IAAI,EADD,GAEHD,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,4BAAqBI,MAAM,IAAIf,GAAG,CAACiB,MAAJ,CAAWC,EAA1C;AADY,iBAArB,C","sourcesContent":["import Driver from \"../database/Driver\";\nimport Rider from \"../database/Rider\";\nimport Trip from \"../database/Trip\";\n\nexport default class ModelValidator {\n  static async validateDriver(req, res, next) {\n    const { driverId } = req.body;\n    const driver = await Driver.findByOne(driverId);\n    req.driver = driver;\n    return driver.rows[0]\n      ? next()\n      : res.status(404).json({\n          message: `Conductor con el id ${driverId} no se encuentra en la base de datos`,\n        });\n  }\n\n  static async validateRider(req, res, next) {\n    const { riderId } = req.body;\n    const rider = await Rider.findByOne(riderId);\n    req.rider = rider;\n    return rider.rows[0]\n      ? next()\n      : res.status(404).json({\n          message: `Pasajero con el id ${riderId} no se encuentra en la base de datos`,\n        });\n  }\n  \n  static async validateTrip(req, res, next) {\n    const { tripId } = req.body;\n    const trip = await Trip.findByOne(tripId || req.params.id);\n    req.trip = trip;\n    return trip.rows[0]\n      ? next()\n      : res.status(404).json({\n          message: `El viaje con id ${tripId || req.params.id} no se encuentra en la base de datos`,\n        });\n  }\n}\n"],"file":"modelValidator.js"}