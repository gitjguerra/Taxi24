{"version":3,"sources":["../../../app/v1/middlewares/validators.js"],"names":["Joi","require","validateTrip","req","res","next","schema","object","departure","string","required","destination","riderId","number","integer","driverId","validate","body","error","status","json","details","message","validateMyLocation","myLocation","options","allowUnknown","query","validateGPS","departLat","lat","departLon","lon","destLat","destLon","validateId","id","params","validateAmount","amount","positive","precision"],"mappings":"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","sourcesContent":["const Joi = require(\"@hapi/joi\");\nimport { cleanJoiValidator, validateCoordinates, getCoordinates } from \"../helpers/helpers\";\n\nexport const validateTrip = (req, res, next) => {\n  const schema = Joi.object({\n    departure: Joi.string().required(),\n    destination: Joi.string().required(),\n    riderId: Joi.number().integer().required(),\n    driverId: Joi.number().integer().required(),\n  });\n  const { error } = schema.validate(req.body);\n  if (error)\n    return res\n      .status(400)\n      .json({ error: cleanJoiValidator(error.details[0].message) });\n  return next();\n};\n\nexport const validateMyLocation = (req, res, next) => {\n  const schema = Joi.object({\n    myLocation: Joi.string().required(),\n  }).options({ allowUnknown: true });\n  const { error } = schema.validate(req.query);\n  if (error)\n    return res\n      .status(400)\n      .json({ error: cleanJoiValidator(error.details[0].message) });\n  return next();\n};\n\nexport const validateGPS = (req, res, next) => {\n  const { departure, destination } = req.body;\n  const { myLocation } = req.query;\n  if (departure) {\n    const { lat: departLat, lon: departLon } = getCoordinates(departure);\n    if (!validateCoordinates(departLat, departLon))\n      return res.status(400).json({\n        error: \"Coordenadas del punto de inicio son invalidas, por favor verifique !!!\",\n      });\n  }\n  if (destination) {\n    const { lat: destLat, lon: destLon } = getCoordinates(destination);\n    if (!validateCoordinates(destLat, destLon))\n      return res\n        .status(404)\n        .json({ error: \"Coordenadas del punto de destino son invalidas, por favor verifique !!!\" });\n  }\n  if (myLocation) {\n    const { lat, lon } = getCoordinates(myLocation);\n    if (!validateCoordinates(lat, lon))\n      return res\n        .status(404)\n        .json({ error: \"Coordenadas invalidas, por favor verifique !!!\" });\n  }\n  return next();\n};\n\nexport const validateId = (req, res, next) => {\n  const schema = Joi.object({\n    id: Joi.number().required(),\n  });\n  const { error } = schema.validate(req.params);\n  if (error)\n    return res\n      .status(400)\n      .json({ error: cleanJoiValidator(error.details[0].message) });\n  return next();\n};\n\nexport const validateAmount = (req, res, next) => {\n  const schema = Joi.object({\n    amount: Joi.number().positive().precision(2).required()\n  });\n  const { error } = schema.validate(req.params);\n  if (error)\n    return res\n      .status(400)\n      .json({ error: cleanJoiValidator(error.details[0].message) });\n  return next();\n};\n"],"file":"validators.js"}